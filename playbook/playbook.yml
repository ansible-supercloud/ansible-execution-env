---
- name: Push BOM to Git
  vars:
    git_access_token: ""
    git_organization: ""
    git_username: ""
    git_email: ""
    zip_url: ""
    playbook_template_inventory: ""
    playbook_template_organization: ""
  hosts: localhost
  tasks:
    - name: Download Zip file
      get_url:
        url: "{{ zip_url }}"
        dest: .
    - name: Get Zip file details
      find:
        paths: "{{ playbook_dir }}"
        patterns: "*.zip"
        file_type: file
      register: zip_details
    - name: Set zip file path to a variable
      set_fact:
        zip_path: "{{ zip_details.files[0].path }}"
    - name: Set repo name as zip file name
      set_fact:
        git_repo_name: "{{ zip_path | basename | splitext | first | trim }}"
        project_name: "{{ zip_path | basename | splitext | first | trim }}"
    - name: Create remote Git repo
      community.general.github_repo:
        access_token: "{{ git_access_token }}"
        organization: "{{ git_organization }}"
        name: "{{ git_repo_name }}"
        description: "Super Cloud automation BOM artifact"
        private: false
        state: present
        force_defaults: false
    - name: Create SSH directory
      ansible.builtin.file:
        path: ~/.ssh
        state: directory
    - name: Set SSH key path
      set_fact:
        ssh_key_path: "~/.ssh/{{ git_repo_name }}"
    - name: Generate target SSH key for accessing GitHub
      openssh_keypair:
        path: "{{ ssh_key_path }}"
        type: ed25519
        force: true
    - name: Add new deploy key
      github_deploy_key:
        name: "{{ git_repo_name }}"
        key: "{{ lookup('file', '{{ ssh_key_path }}.pub') }}"
        owner: "{{ git_organization }}"
        repo: "{{ git_repo_name }}"
        token: "{{ git_access_token }}"
        force: true
        read_only: false
    - name: Delete local Git repo if exists
      file:
        path: "./{{ git_repo_name }}"
        state: absent
    - name: Update SSH config
      ansible.builtin.blockinfile:
        path: ~/.ssh/config
        create: true
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ git_repo_name }}"
        block: |
          Host github-repo-{{git_repo_name}}
              HostName github.com
              IdentitiesOnly yes
              IdentityFile={{ ssh_key_path }}
    - name: Clone Git repo
      shell: git clone git@github-repo-{{git_repo_name}}:{{ git_organization }}/{{ git_repo_name }}.git
      environment:
        GIT_SSH_COMMAND: "ssh -i {{ ssh_key_path }} -o 'StrictHostKeyChecking no'"
    - name: Extract deployment zip file
      unarchive:
        src: "{{ zip_path }}"
        dest: /tmp
        list_files: yes
        remote_src: yes
        extra_opts: "-o"
      register: archive_contents
    - name: Set path to extracted folder
      set_fact:
        extracted_folder_path: "/tmp/{{ archive_contents.files[0] }}"
    - name: Copy .git from cloned repo to extracted folder
      copy:
        src: "{{ git_repo_name }}/.git"
        dest: "{{ extracted_folder_path }}"
    - name: Set Git identity
      git_config:
        name: user.name
        value: "{{git_username}}"
        scope: global
      args:
        repo: git@github-repo-{{git_repo_name}}:{{ git_organization }}/{{ git_repo_name }}.git
    - name: Set Git identity
      git_config:
        name: user.email
        value: "{{git_email}}"
        scope: global
      args:
        repo: git@github-repo-{{git_repo_name}}:{{ git_organization }}/{{ git_repo_name }}.git
    - name: Push contents to remote Git repo
      shell: |
        cd "{{ extracted_folder_path }}"
        git branch -M main
        git add .
        git commit -m "init"
        git push -u origin main

    - name: Create AAP project for each capability
      awx.awx.project:
        controller_host: "{{controller_host}}"
        controller_username: "{{controller_username}}"
        controller_password: "{{controller_password}}"
        organization: "{{playbook_template_organization}}"
        name: "{{ git_repo_name }}"
        scm_type: "git"
        scm_url: https://github.com/{{ git_organization }}/{{ git_repo_name }}.git
        validate_certs: false
    - name: Create job template for each capability 
      awx.awx.job_template:
        controller_host: "{{controller_host}}"
        controller_username: "{{controller_username}}"
        controller_password: "{{controller_password}}"
        name: "deploy-{{ git_repo_name }}"
        inventory: "{{ playbook_template_inventory }}"
        organization: "{{playbook_template_organization}}"
        project: "{{ git_repo_name }}"
        playbook: "playbook.yml"
        extra_vars:
          zip_url: "{{ zip_url }}"
          playbook_template_organization: "{{ playbook_template_organization }}"
          playbook_template_inventory: "{{ playbook_template_inventory }}"
        credentials:
          - "SuperCloud Git Credentials"
          - "SuperCloud AAP Credentials"
          - "SuperCloud TF Inputs"
        execution_environment: "SuperCloud Execution Environment"
        validate_certs: false
      register: create_job_template_results
      check_mode: no
    - name: Launch the job template with extra_vars
      awx.awx.job_launch:
        job_template: "deploy-{{ git_repo_name }}"